#!/usr/bin/env python
# coding: utf-8

# <div style="border:solid green 2px; padding: 20px"> <h1 style="color:green; margin-bottom:20px">Комментарий наставника</h1>
# 
# Привет! Спасибо, что сдал задание:) Ты проделал большую работу. Далее в файле мои комментарии ты сможешь найти в ячейках, аналогичных данной ( если рамки комментария зелёные - всё сделано правильно; жёлтые - есть замечания, но не критично; красные - нужно переделать). Не удаляй эти комментарии и постарайся учесть их в ходе выпфолнения проекта. 
# 
# </div>

# # Исследование объявлений о продаже квартир
# 
# В вашем распоряжении данные сервиса Яндекс.Недвижимость — архив объявлений о продаже квартир в Санкт-Петербурге и соседних населённых пунктов за несколько лет. Нужно научиться определять рыночную стоимость объектов недвижимости. Ваша задача — установить параметры. Это позволит построить автоматизированную систему: она отследит аномалии и мошенническую деятельность. 
# 
# По каждой квартире на продажу доступны два вида данных. Первые вписаны пользователем, вторые — получены автоматически на основе картографических данных. Например, расстояние до центра, аэропорта, ближайшего парка и водоёма. 

# ### Шаг 1. Откройте файл с данными и изучите общую информацию. 

# In[2]:


import pandas as pd


# In[ ]:





# In[3]:


data = pd.read_csv('/datasets/real_estate_data.csv', sep='\t')


# In[4]:


data.info()


# Описание данных
# - airports_nearest — расстояние до ближайшего аэропорта в метрах (м)
# - balcony — число балконов
# - ceiling_height — высота потолков (м)
# - cityCenters_nearest — расстояние до центра города (м)
# - days_exposition — сколько дней было размещено объявление (от публикации до снятия)
# - first_day_exposition — дата публикации
# - floor — этаж
# - floors_total — всего этажей в доме
# - is_apartment — апартаменты (булев тип)
# - kitchen_area — площадь кухни в квадратных метрах (м²)
# - last_price — цена на момент снятия с публикации
# - living_area — жилая площадь в квадратных метрах(м²)
# - locality_name — название населённого пункта
# - open_plan — свободная планировка (булев тип)
# - parks_around3000 — число парков в радиусе 3 км
# - parks_nearest — расстояние до ближайшего парка (м)
# - ponds_around3000 — число водоёмов в радиусе 3 км
# - ponds_nearest — расстояние до ближайшего водоёма (м)
# - rooms — число комнат
# - studio — квартира-студия (булев тип)
# - total_area — площадь квартиры в квадратных метрах (м²)
# - total_images — число фотографий квартиры в объявлении

# In[5]:


data.head(5)


# 

# ### Вывод

# Видно что в таблице очень много пропусков, необзодимо более детальное изучение чтоб понять происхождение.
# Так же должно быть три булевых типа а их два, третий спрятался за типом object нужно будет разобраться с ним.
# так же достаточно присутсвует вещественных типов данных, необходимо от них избавиться и привести всё что можно к целочисленному.

# <div style="border:solid green 2px; padding: 20px"> <h1 style="color:green; margin-bottom:20px">Комментарий наставника</h1>
# 
# Отличное начало, радует, что основательно подходишь к анализу с самого начала работы

# ### Шаг 2. Предобработка данных

# In[6]:


def fix_cel(et):
    return data[data['floors_total'] == et]['ceiling_height'].median()
data.loc[data['ceiling_height'].isnull(), 'ceiling_height'] = data.loc[
    data['ceiling_height'].isnull(), 'floors_total'].apply(fix_cel);


# Пропуски в столбце ceiling_height были заменены на медианное значение по принципу: ищем медианное значение по дому с таким же кол-во этажей и заменяем пропуск

# In[7]:


data[data['ceiling_height'].isnull()]


# In[8]:


a = data['ceiling_height'].median()
data['ceiling_height'].fillna(a, inplace=True)


# Так как осталось еще несколько пропусков (очень маленькое кол-во) меняем их на медианное значени по всей выборке

# In[9]:


data[data['floors_total'].isnull()]


# In[10]:


data['floors_total'].fillna(data['floor'], inplace=True)


# Так как очень мало записей, где не указано общее кол-во этажей, заменим пропуски на значени поля floor

# In[11]:


data.info()


# In[12]:


data['is_apartment'].fillna(False, inplace=True)


# Предположим что все пропуски с графе 'is_apartment' свидетельствуют о том что это обычная квартира, соотвественно можно применить к таким значениям False

# In[13]:


data['balcony'].fillna(0, inplace=True)
data['ponds_around3000'].fillna(0, inplace=True)
data['parks_around3000'].fillna(0, inplace=True)


# Замение пропуски в слобце balcony, ponds_around3000, parks_around3000 на 0 значения 

# In[14]:


data.info()


# In[15]:


data['ponds_around3000'].fillna(0, inplace=True)
data['parks_around3000'].fillna(0, inplace=True)


# In[16]:


data.duplicated().sum()


# In[17]:


data['first_day_exposition'] = pd.to_datetime(data['first_day_exposition'], format='%Y-%m-%d %H:%M')


# In[18]:


data['last_price'] = data['last_price'].astype('int64')
data['floors_total'] = data['floors_total'].astype('int64')
data['floor'] = data['floor'].astype('int64')
data['balcony'] = data['balcony'].astype('int64')
data['ponds_around3000'] = data['ponds_around3000'].astype('int64')
data['parks_around3000'] = data['parks_around3000'].astype('int64')


# In[19]:


data['days_exposition'].fillna(0, inplace=True)


# Пропуски в days_exposition заменим на 0 так как логичнее всего будет то что если значения пропущены, значит договоренность о продаже квартиры была достигнута в день опубликования объявления 

# <div style="border:solid  green  2px; padding: 20px"> <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# Вся требуемая предобработка выполнена, всё логично и точно, продолжай в том же духе!)
# 

# ### Шаг 3. Посчитайте и добавьте в таблицу

# In[20]:


data['sqmprice'] = data['last_price'] / data['total_area']
data['sqmprice'] = data['sqmprice'].round()


# In[21]:


data['weekday'] = data['first_day_exposition'].dt.weekday
data['year'] = data['first_day_exposition'].dt.year
data['month'] = data['first_day_exposition'].dt.month


# In[22]:


data.info()


# In[23]:


data[data['living_area'].isnull()]


# In[24]:


def fix_liv(et):
    return data[data['total_area'] == et]['living_area'].median()
data.loc[data['living_area'].isnull(), 'living_area'] = data.loc[
    data['living_area'].isnull(), 'total_area'].apply(fix_liv);


# Заменим пропуски в жилой площади на медиану жилой площади, по значениям записей  с идентичной общей площадью

# In[25]:


a = data['living_area'].median() / data['total_area'].median()


# In[26]:


print(a)


# найдем соотношение жилой площади к общей площади, оно нам пригодится чтоб вычислить пропуски в оставшихся значениях где не отработала функция fix_liv

# In[27]:


data['living_area'].fillna(data['total_area']*a, inplace=True)

#data[data['living_area'].isnull()]


# In[28]:


data.info()


# In[29]:


data.query('total_area < (living_area + kitchen_area)')


# In[30]:


data['floor_name']=data['floor']


# In[31]:


def foo(x):
    if x['floor'] == x['floors_total']:
        return 'Крайний'
    elif x['floor'] == 1:
        return 'Первый'
    else:
        return 'Другое'
data['floor_name'] = data.apply(foo, axis=1)


# Добавили новый столбец значения в которым отображают, последний, первый или другой этаж

# In[32]:


data.info()


# In[33]:


def fix_kch(e):
    return data[data['living_area'] == e]['kitchen_area'].median()
data.loc[data['kitchen_area'].isnull(), 'kitchen_area'] = data.loc[
    data['kitchen_area'].isnull(), 'living_area'].apply(fix_kch);


# In[34]:


b = data['kitchen_area'].median() / data['living_area'].median()


# In[35]:


print(b)


# In[36]:


data['kitchen_area'].fillna(data['living_area']*b, inplace=True)


# Аналогично заменим пропуски в столбце kitchen_area

# In[37]:


data['livingtotal'] = data['living_area'] / data['total_area']
data ['kitchentotal'] = data['kitchen_area'] / data['total_area']


# Добавили два новых столбца livingtotal kitchentotal как соотношение соответсвующей площади к общей

# In[38]:


data = data.query(' 2.5 <=ceiling_height < 6')


# Потолки не могут быть меньше 2.5 метров и больще 6

# In[39]:


data =  data[data['floor']  <= data['floors_total']]


# Этаж не может быть выше чем кол-во этажей в доме

# In[40]:


data.info()


# In[ ]:





# In[ ]:





# 

# <div style="border:solid  green  2px; padding: 20px"> <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# Всё посчитано верно и добавлено в таблицу, продолжай в том же духе)

# ### Шаг 4. Проведите исследовательский анализ данных и выполните инструкции:

# In[41]:


data.hist('total_area', bins=30, range= (0, 400))
data['total_area'].describe()


# <div style="border:solid orange 2px; padding: 20px"> <h1 style="color:orange; margin-bottom:20px">Комментарий наставника</h1>
# 
# Не забывай подписывать оси на графиках и сам график, иначе не залазя в код абсолютно не понятно, что изображено

# Заметно что основная масса квартир площадью ~ 50 квм растёт к этому показателю, далее стремительно падает

# In[42]:


data = data.query('total_area <= 250')


# In[43]:


data.hist('rooms', bins=5, range=(0, 8 ) )
data['rooms'].describe()


# Больше всего было продано  2х 3х комнатных квартир

# In[44]:


data = data.query('rooms <= 7')


# Отсечем редкие продажи квартир свыше 7 комнат, их очень мало на общий результат это никак не повлияет

# In[45]:


data.hist('ceiling_height', bins=50, range=(0, 6)  )
data['ceiling_height'].describe()


# In[46]:


data =  data.query('ceiling_height <= 4')


# In[47]:


data.hist('last_price', bins=40, range=(2000000, 20000000 ) )


# In[48]:


data.hist('days_exposition', bins=100)
sale_mean = data['days_exposition'].mean().round()
sale_median = data['days_exposition'].median().round()

print ('Среднее время продажи квартир', sale_mean )
print ('Медиана времени продажи квартир', sale_median )


# Исходя из данных медиана сильно отличается от среднего, полагаясь на это можно сказать что есть случаи когда продажа длилась особенно долго! на гистограмме видно что были случаи когда жилье продовалось > 1200 дней
# 
# Так же есть случаи очень быстро продажи за несколько дней, похоже на мошеннические действия, таким образом было принято решение отсечь датафрейм по продаже (5-600) дней

# <div style="border:solid  green  2px; padding: 20px"> <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# Всё абсолютно верно, радует,что пишешь такие подробные и всепокрывающие выводы

# In[49]:


data = data.query(' 5 < days_exposition < 600')


# отсечем все продажи свыше 600 дней (слишком долгий период, еденичные продажи) а так же до 5 дней, так как большой пик! владельцы могли снимать объявления и выкладывать заново, чтоб поднять объявление наверх

# In[50]:


data = data[data['ceiling_height']  < 6]


# In[51]:


data.plot(x='last_price', y='total_area', kind='scatter', alpha=0.3)


# Заметно что с увелечнием площади, цена квартиры увеличивается

# In[52]:


data.plot(x='last_price', y='rooms', kind='scatter', alpha=0.3)


# Цены на квартиры растут в зависимости от кол-ва комнат (до 4 )  далее цена уменьшается, это скорее всего связано с тем что в Петербурге много бывших коммунальных квартир переведенных в обычные  

# In[53]:


data.plot(x='cityCenters_nearest', y='last_price', kind='scatter', alpha=0.3)


# На мой взгляд удаленность от центра не сильно влияет на стоимость жилья

# In[54]:


data.plot(x='last_price', y='weekday', kind='scatter', alpha=0.3)


# Явной зависимости дня сделки и цены не наблюдается, только в воскресенье более лешевые сделки 

# In[55]:


data.plot(x='last_price', y='month', kind='scatter', alpha=0.3)


# Сделки с более дорогим жильем своершаются в июне и ноябре. Июнь многие получают квартальные и полугодовые премии, ноябрь - предновогодние скидки, и так же люди старабтся закрыть сделку в уходящем году

# In[56]:


data.plot(x='last_price', y='year', kind='scatter', alpha=0.3)


# Цены на квартиры до 2017 года росли, далее наблюдается спад в цене! это можно увязать с ценой курса доллара

# In[57]:


data.plot(x='last_price', y='floor', kind='scatter', alpha=0.3)


# Зависимости этажа и цены не наблюдается

# In[60]:


sale = data.pivot_table(index='locality_name', values='sqmprice', aggfunc=['mean', 'count'])


# In[61]:


sale.columns = ('sqmprice', 'count')


# In[63]:


sale['sqmprice'] = sale['sqmprice'].round()
sale.sort_values(by='count', ascending=False).head(10)


# Среди 10 городов с наибольшим числом сделок, можно выделить СПб где средняя цена за квм жилья выше всего, замыкает рейтинг Выборг там самое доступное жилье в пересчете на квм

# <div style="border:solid  green  2px; padding: 20px"> <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# Верно

# In[68]:


spb = data.query('locality_name == "Санкт-Петербург"')


# In[69]:


spb.dropna(subset=['cityCenters_nearest'], inplace=True)


# In[70]:


spb.head()


# In[71]:


spb['km'] = spb['cityCenters_nearest'] /1000
spb['km'] = spb['km'].round()


# In[72]:


spb.head()


# In[73]:


spb1 = spb.pivot_table(index = 'km', values='last_price')


# In[74]:


spb1.info()


# In[75]:


spb1.plot( style='o-', grid=True, figsize=(12, 6))


# Судя по графику можно наблюдать что скачок начинается от 3 км, так что можно предположить что 3 км это граница центальной зоны Петербурга

# In[76]:


spb_center = spb.query('km <= 3')


# <div style="border:solid  green  2px; padding: 20px"> <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# Центр определён верно, класс!

# In[77]:


spb_center.hist('total_area', bins=30, range= (0, 400))
spb_center['total_area'].describe()


# In[80]:


spb_center.hist('last_price', bins=40, range=(2000000, 20000000 ) )
spb_center['last_price'].describe()


# In[81]:


spb_center.hist('rooms', bins=5, range=(0, 8 ) )
spb_center['rooms'].describe()


# In[82]:


spb_center.hist('ceiling_height', bins=50, range=(0, 6)  )
spb_center['ceiling_height'].describe()


# In[83]:


spb_center.plot(x='total_area', y='last_price', kind='scatter', alpha=0.3)


# In[85]:


spb_center.plot(x='last_price', y='rooms', kind='scatter', alpha=0.3)


# In[86]:


spb_center.plot(x='floor', y='last_price', kind='scatter', alpha=0.3)


# In[87]:


spb_center.plot(x='km', y='last_price', kind='scatter', alpha=0.3)


# In[88]:


spb_center.plot(x='last_price', y='year', kind='scatter', alpha=0.3)


# In[ ]:





# Высота потолков в центре выше чем в обшей выборке, концетрация квартир с площадью 70-100 квм в центре преобладает, а в общей выборке ~ 55 квм.  люди готовы платить за жилье  в центре выше чем в целом за его пределами. кол-во комнат продаваемых объектов в центре и по региону не отличается. Цена в центре не имеет отличий в зависимости от числа комнат, этажа,  даты размещения объявления! а удаленность от центра в (центральном районе ) не наблюдается, в отличии от всей выборки 
# 

# <div style="border:solid  green  2px; padding: 20px"> <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# У тебя отлично получается анализировать сложные данные и находить скрытые зависимости, здорово!)

# ### Шаг 5. Общий вывод

# Основная доля продаж приходится на 2х 3х комнатные квартиры, стоимостью в пределах 5000000, цена росла до 2017 года, далее плавно снижалась! В центре нет зависимости удаленности от него и стоимости квартиры. Пики продаж приходятся на ноябрь и июнь месяц (связано с полугодовыми премиями и квартальными) а так же желаением людей закрыть сделку в уходящем году. в центре квартиры приобладают с более высокими потолками и малоэтажностью  (старые дома) а целом по выборке наоборот более высокие дома и стандартрые потолки 2.8

# Центр ограничивается 3 км. На стоимость квартир центре влияет площадь и более высокая стоимость за квм, более дорогие квартиры расположены на 2ом км

# <div style="border:solid orange 2px; padding: 20px"> <h1 style="color:orange; margin-bottom:20px">Комментарий наставника</h1>
# 
# Общий вывод в будущем стоит писать подробнее, а так же приводить больше цифр полученных в ходе выполнения проекта

# 

# ### Чек-лист готовности проекта
# 
# Поставьте 'x' в выполненных пунктах. Далее нажмите Shift+Enter.

# - [x]  открыт файл
# - [x]  файлы изучены (выведены первые строки, метод info())
# - [x]  определены пропущенные значения
# - [x]  заполнены пропущенные значения
# - [x]  есть пояснение какие пропущенные значения обнаружены
# - [x]  изменены типы данных
# - [x]  есть пояснение в каких столбцах изменены типы и почему
# - [x]  посчитано и добавлено в таблицу: цена квадратного метра
# - [x]  посчитано и добавлено в таблицу: день недели, месяц и год публикации объявления
# - [x]  посчитано и добавлено в таблицу: этаж квартиры; варианты — первый, последний, другой
# - [x]  посчитано и добавлено в таблицу: соотношение жилой и общей площади, а также отношение площади кухни к общей
# - [x]  изучены следующие параметры: площадь, цена, число комнат, высота потолков
# - [x]  построены гистограммы для каждого параметра
# - [x]  выполнено задание: "Изучите время продажи квартиры. Постройте гистограмму. Посчитайте среднее и медиану. Опишите, сколько обычно занимает продажа. Когда можно считать, что продажи прошли очень быстро, а когда необычно долго?"
# - [x]  выполнено задание: "Уберите редкие и выбивающиеся значения. Опишите, какие особенности обнаружили."
# - [x]  выполнено задание: "Какие факторы больше всего влияют на стоимость квартиры? Изучите, зависит ли цена от квадратного метра, числа комнат, этажа (первого или последнего), удалённости от центра. Также изучите зависимость от даты размещения: дня недели, месяца и года. "Выберите 10 населённых пунктов с наибольшим числом объявлений. Посчитайте среднюю цену квадратного метра в этих населённых пунктах. Выделите населённые пункты с самой высокой и низкой стоимостью жилья. Эти данные можно найти по имени в столбце '*locality_name'*. "
# - [x]  выполнено задание: "Изучите предложения квартир: для каждой квартиры есть информация о расстоянии до центра. Выделите квартиры в Санкт-Петербурге (*'locality_name'*). Ваша задача — выяснить, какая область входит в центр. Создайте столбец с расстоянием до центра в километрах: округлите до целых значений. После этого посчитайте среднюю цену для каждого километра. Постройте график: он должен показывать, как цена зависит от удалённости от центра. Определите границу, где график сильно меняется — это и будет центральная зона. "
# - [x]  выполнено задание: "Выделите сегмент квартир в центре. Проанализируйте эту территорию и изучите следующие параметры: площадь, цена, число комнат, высота потолков. Также выделите факторы, которые влияют на стоимость квартиры (число комнат, этаж, удалённость от центра, дата размещения объявления). Сделайте выводы. Отличаются ли они от общих выводов по всему городу?"
# - [x]  в каждом этапе есть выводы
# - [x]  есть общий вывод

# <div style="border:solid  green  2px; padding: 20px">
# 
# <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# #### Код
# 
# Всё отлично. Из того, что очень порадовало - соблюдена структура проекта, шаги из задания обозначены и выполнены последовательно, код написан аккуратно, используются комментарии к коду, быстро можно понять, какие операции выполняют сложные конструкции. В качестве совета предлагаю глубже изучить библиотеку Seaborn для построения более ярких и качественных визуализаций в Python, так как иногда хорошая красочная визуализация может сказать очень многое о данных.
# 
# #### Выводы
# 
# Ты пишешь отличные обоснованные выводы по проделанной раблоте и выдвигаешь корректные гипотезы - это очень радует!) Так же видно глубокое понимание проведённого анализа. Было очень интересно проверять твой проект и следить за твоей мыслью, продолжай в том же духе) Удачи!)

# <div style="border:solid  green  2px; padding: 20px">
# 
# <h1 style="color: green ; margin-bottom:20px">Комментарий наставника</h1>
# 
# Работа принята!) Удачи на следующих этапах, у тебя всё получится, только не сомневайся в себе и старательно подходи ко всем вопросам)

# In[ ]:




